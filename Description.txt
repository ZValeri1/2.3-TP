# === –ò–ú–ü–û–†–¢–´ ===
import os
import json
import io
import uuid
from fastapi import File, UploadFile
from pydantic import BaseModel, Field, model_validator
from typing import List, Optional, Union
from openai import OpenAI
from PIL import Image
import fitz  # PyMuPDF
import base64
# === –õ–û–ö–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ (VLM) ===
VLM_BASE_URL = "http://10.201.3.112:8000/v1"
VLM_API_KEY = "EMPTY"
VLM_MODEL = "Qwen2.5-VL-72B-Instruct-AWQ"
VLM_TEMPERATURE = 0.0

try:
    from openai import OpenAI
    vlm_client = OpenAI(base_url=VLM_BASE_URL, api_key=VLM_API_KEY)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VLM: {e}")
    vlm_client = None

def render_pdf_pages_in_memory(pdf_path: str, dpi: int = 150):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ —Å–ø–∏—Å–æ–∫ PIL.Image.
    """
    if not os.path.exists(pdf_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")

    doc = fitz.open(pdf_path)
    zoom = dpi / 72.0
    mat = fitz.Matrix(zoom, zoom)
    out = []
    for page in doc:
        pix = page.get_pixmap(matrix=mat, alpha=False)
        img = Image.frombytes("RGB", (pix.width, pix.height), pix.samples)
        out.append(img)
    doc.close()
    return out

def image_to_base64(img: Image.Image) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PIL.Image –≤ base64."""
    buffer = io.BytesIO()
    img.save(buffer, format="PNG")
    return base64.b64encode(buffer.getvalue()).decode("utf-8")

class DrawingDescription(BaseModel):
    title: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —Å–±–æ—Ä–∫–∏")
    material: str = Field(..., description="–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–ú–≥6)")
    mass_kg: float = Field(..., description="–ú–∞—Å—Å–∞ –¥–µ—Ç–∞–ª–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ)")
    dimensions_mm: List[float] = Field(..., description="–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö [–¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞]")
    description: str = Field(..., description="–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞")

    @model_validator(mode='after')
    def validate_dimensions(self):
        if len(self.dimensions_mm) != 3:
            raise ValueError("dimensions_mm –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 3 –∑–Ω–∞—á–µ–Ω–∏—è")
        return self

def generate_drawing_description(pdf_path: str, use_json: bool = True):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–∞ –ø–æ PDF.
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É.
        use_json (bool): –ï—Å–ª–∏ True ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON. –ï—Å–ª–∏ False ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'json' –∏/–∏–ª–∏ 'text'.
    """
    if not vlm_client:
        return {"error": "VLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    try:
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        pages = render_pdf_pages_in_memory(pdf_path)
        if not pages:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF"}

        # –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        images_b64 = [image_to_base64(page) for page in pages]

        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è VLM
        system_prompt = (
            "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É —á–µ—Ä—Ç–µ–∂–µ–π.\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏\n"
            "- –ú–∞—Ç–µ—Ä–∏–∞–ª\n"
            "- –ú–∞—Å—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
            "- –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –º–º\n"
            "- –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏)\n"
            "\n"
            "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è.\n"
            "\n"
            "–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "{\n"
            '  "title": "string",\n'
            '  "material": "string",\n'
            '  "mass_kg": number,\n'
            '  "dimensions_mm": [number, number, number],\n'
            '  "description": "string"\n'
            "}\n"
            "–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!"
        )

        messages = [
            {"role": "system", "content": system_prompt},
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for b64 in images_b64:
            uri = f"data:image/png;base64,{b64}"
            messages.append({"role": "user", "content": [{"type": "image_url", "image_url": {"url": uri}}]})

        # –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        completion = vlm_client.beta.chat.completions.parse(
            model=VLM_MODEL,
            response_format=DrawingDescription,
            messages=messages,
            temperature=VLM_TEMPERATURE
        )

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        parsed = completion.choices[0].message.parsed

        # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {}
        if use_json:
            result["json"] = parsed.model_dump()

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        text = (
            f" –ù–∞–∑–≤–∞–Ω–∏–µ: {parsed.title}\n"
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {parsed.material}\n"
            f"–ú–∞—Å—Å–∞: {parsed.mass_kg} –∫–≥\n"
            f"–ì–∞–±–∞—Ä–∏—Ç—ã: {parsed.dimensions_mm[0]}√ó{parsed.dimensions_mm[1]}√ó{parsed.dimensions_mm[2]} –º–º\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {parsed.description}"
        )
        result["text"] = text

        return result

    except Exception as e:
        return {"error": str(e)}

# === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
if __name__ == "__main__":
    # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É PDF
    pdf_path = "/tmp/example.pdf"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    result = generate_drawing_description(pdf_path, use_json=True)

    # –í—ã–≤–æ–¥
    if "error" in result:
        print("–û—à–∏–±–∫–∞:", result["error"])
    else:
        print("JSON:")
        print(json.dumps(result["json"], indent=2))

        print("\nüìÑ –¢–µ–∫—Å—Ç:")
        print(result["text"])