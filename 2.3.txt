# === –®–ê–ì 1: –ò–ú–ü–û–†–¢ –ë–ò–ë–õ–ò–û–¢–ï–ö ===
from fastapi import FastAPI, File, UploadFile, HTTPException
from pydantic import BaseModel, Field, model_validator, RootModel
from typing import List, Optional, Union, Literal
import json
import io
import uuid
import time
from openai import OpenAI
from opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

# === –®–ê–ì 2: –û–¢–õ–ê–î–ö–ê ‚Äî –ü–µ—á–∞—Ç—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI ===
def print_request_body(span, request):
    try:
        bytes_content = b''.join(chunk for chunk in request.stream)
        content_str = bytes_content.decode('utf-8')
        print("üîç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI:")
        print(json.dumps(json.loads(content_str), indent=2))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –í–ê–ñ–ù–û: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞ openai!
HTTPXClientInstrumentor().instrument(request_hook=print_request_body)

# === –®–ê–ì 3: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FastAPI –∏ OpenAI ===
app = FastAPI(title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ü –ø–æ –î–°–ï", version="0.1")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API_KEY)
client = OpenAI(api_key="your-openai-api-key")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á

# === –®–ê–ì 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Pydantic (6 –ø–æ–ª–µ–π) ===
class Operation(BaseModel):
    operation_name: str = Field(..., description="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ–Ω—Ç—Ä–æ–ª—å', '–°–ª–µ—Å–∞—Ä–Ω–∞—è')")
    equipment_name: str = Field(..., description="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫')")
    
    workshop_number: int = Field(..., description="–ù–æ–º–µ—Ä —Ü–µ—Ö–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)")
    section: str = Field(..., description="–£—á–∞—Å—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π', '–°–≤–∞—Ä–æ—á–Ω—ã–π')")
    labor_time_hours: float = Field(..., description="–í—Ä–µ–º—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –≤ —á–∞—Å–∞—Ö (–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ > 0)")
    resources: str = Field(..., description="–†–µ—Å—É—Ä—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢–µ—Ö–Ω–æ–ª–æ–≥, —Å—Ç–∞–Ω–æ–∫, –º–∞—Ç–µ—Ä–∏–∞–ª')")

    @model_validator(mode='after')
    def validate_not_empty(self):
        if not self.operation_name.strip():
            raise ValueError("operation_name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.equipment_name.strip():
            raise ValueError("equipment_name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.section.strip():
            raise ValueError("section –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.resources.strip():
            raise ValueError("resources –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if self.labor_time_hours <= 0:
            raise ValueError("labor_time_hours –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if not (1 <= self.workshop_number <= 10):
            raise ValueError("workshop_number –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
        return self


class TPOutput(BaseModel):
    operations: List[Operation] = Field(
        ..., 
        description="–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç–µ—Ö–ø—Ä–æ—Ü–µ—Å—Å–µ. "
                    "–ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å 6 –ø–æ–ª—è–º–∏: operation_name, equipment_name, workshop_number, section, labor_time_hours, resources. "
                    "–í—ã–±–æ—Ä –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –º–æ–¥–µ–ª—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
    )

    @model_validator(mode='after')
    def validate_operations(self):
        if not self.operations:
            raise ValueError("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return self


# === –®–ê–ì 5: –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∑–∞–¥–∞—á 2.2.1, 2.2.2, 1.5 ===
def extract_metadata_from_pdf(pdf_bytes: bytes) -> dict:
    """
    –ó–∞–≥–ª—É—à–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∞.
    –†–µ–∞–ª—å–Ω–æ: OCR + –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ PDF.
    """
    return {
        "drawing_number": "DS-789",
        "title": "–î–µ—Ç–∞–ª—å —Å–±–æ—Ä–∫–∏ —É–∑–ª–∞ X",
        "revision": "A",
        "author": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
        "date": "2024-04-05",
        "mass_kg": 2.3,
        "dimensions_mm": [100, 50, 20]
    }

def extract_description_from_pdf(pdf_bytes: bytes) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–∞.
    –†–µ–∞–ª—å–Ω–æ: OCR + NLP.
    """
    return (
        "–î–µ—Ç–∞–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ª–∏—Ç—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É –∏–∑ –∞–ª—é–º–∏–Ω–∏—è –ê–ú–≥6. "
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π. "
        "–ù–∞–ª–∏—á–∏–µ —Å–∫–≤–æ–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏–π —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–∫–∏."
    )

def find_nearby_parts(pdf_bytes: bytes) -> List[dict]:
    """
    –ó–∞–≥–ª—É—à–∫–∞: –Ω–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏-–∞–Ω–∞–ª–æ–≥–∏.
    –†–µ–∞–ª—å–Ω–æ: –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –ø–æ –º–∞—Å—Å–µ, –≥–∞–±–∞—Ä–∏—Ç–∞–º, –º–∞—Ç–µ—Ä–∏–∞–ª—É.
    """
    return [
        {
            "part_id": "P-101",
            "name": "–ê–Ω–∞–ª–æ–≥ D–°–ï-1",
            "material": "–ê–ú–≥6",
            "mass_kg": 2.3,
            "dimensions_mm": [100, 50, 20],
            "tp": [
                {"operation": "–ö–æ–Ω—Ç—Ä–æ–ª—å", "equipment": "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫"},
                {"operation": "–°–ª–µ—Å–∞—Ä–Ω–∞—è", "equipment": "–°—Ç–∞–Ω–æ–∫ —Ñ—Ä–µ–∑–µ—Ä–Ω—ã–π"},
                {"operation": "–¢—Ä–∞–≤–ª–µ–Ω–∏–µ", "equipment": "–¢—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥"}
            ]
        },
        {
            "part_id": "P-102",
            "name": "–ê–Ω–∞–ª–æ–≥ D–°–ï-2",
            "material": "–ê–ú–≥6",
            "mass_kg": 2.1,
            "dimensions_mm": [98, 52, 18],
            "tp": [
                {"operation": "–ö–æ–Ω—Ç—Ä–æ–ª—å", "equipment": "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫"},
                {"operation": "–ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞", "equipment": "–†–µ–Ω—Ç–≥–µ–Ω-–∞–ø–ø–∞—Ä–∞—Ç"},
                {"operation": "–¢—Ä–∞–≤–ª–µ–Ω–∏–µ", "equipment": "–¢—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥"}
            ]
        }
    ]


# === –®–ê–ì 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –Ω–∞ 6 –ø–æ–ª–µ–π ===
def generate_tp_prompt(metadata: dict, description: str, nearby_parts: List[dict]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∂—ë—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –Ω–∞ –≤—Å–µ 6 –ø–æ–ª—è.
    """

    # –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä (–æ–ø–µ—Ä–∞—Ü–∏—è, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ) –∏–∑ –≤—Å–µ—Ö –¢–ü –∞–Ω–∞–ª–æ–≥–æ–≤
    unique_operations = set()
    for part in nearby_parts:
        for op in part["tp"]:
            unique_operations.add((op["operation"], op["equipment"]))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    operation_list = "\n".join([
        f"{i+1}. {op[0]} ({op[1]})" 
        for i, op in enumerate(sorted(unique_operations))
    ])

    prompt = f"""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –¥–µ—Ç–∞–ª–∏ {metadata['title']} ({metadata['drawing_number']}) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –µ—ë –∞–Ω–∞–ª–æ–≥–æ–≤.

### –ö–æ–Ω—Ç–µ–∫—Å—Ç:
- **–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏**: {description}
- **–ú–∞—Å—Å–∞**: {metadata.get('mass_kg', '?')} –∫–≥
- **–ì–∞–±–∞—Ä–∏—Ç—ã**: {metadata.get('dimensions_mm', '?')} –º–º

### –ê–Ω–∞–ª–æ–≥–∏:
{json.dumps(nearby_parts, indent=2)}

### –ó–∞–¥–∞—á–∞:
–ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ –¥–∞–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏, –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö. –û–¥–Ω–∞–∫–æ **–µ—Å–ª–∏ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**.

### –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
{operation_list}

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –í–µ—Ä–Ω–∏—Ç–µ **—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π** –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
- –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–≤—Å–µ 6 –ø–æ–ª—è**:
  - `operation_name`: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ–Ω—Ç—Ä–æ–ª—å')
  - `equipment_name`: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫')
  - `workshop_number`: –Ω–æ–º–µ—Ä —Ü–µ—Ö–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)
  - `section`: —É—á–∞—Å—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π')
  - `labor_time_hours`: –≤—Ä–µ–º—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –≤ —á–∞—Å–∞—Ö (–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ > 0)
  - `resources`: —Ä–µ—Å—É—Ä—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢–µ—Ö–Ω–æ–ª–æ–≥, —Å—Ç–∞–Ω–æ–∫, –º–∞—Ç–µ—Ä–∏–∞–ª')

- –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø–æ–ª—è.
- –ù–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ JSON.
- –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.

### –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
{{
  "operations": [
    {{
      "operation_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å",
      "equipment_name": "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫",
      "workshop_number": 3,
      "section": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π",
      "labor_time_hours": 0.3,
      "resources": "–¢–µ—Ö–Ω–æ–ª–æ–≥, –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä"
    }},
    {{
      "operation_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
      "equipment_name": "–†–µ–Ω—Ç–≥–µ–Ω-–∞–ø–ø–∞—Ä–∞—Ç",
      "workshop_number": 5,
      "section": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π",
      "labor_time_hours": 0.5,
      "resources": "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥, –∞–ø–ø–∞—Ä–∞—Ç"
    }}
  ]
}}
    """.strip()

    return prompt


# === –®–ê–ì 7: –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /generate-tp ===
@app.post("/generate-tp")
async def generate_tp(file: UploadFile = File(...)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –î–°–ï, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–ü.
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not file.content_type.startswith("application/pdf"):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF")

    # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã
    pdf_bytes = await file.read()
    
    # –ó–∞–≥–ª—É—à–∫–∏: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    metadata = extract_metadata_from_pdf(pdf_bytes)
    description = extract_description_from_pdf(pdf_bytes)
    nearby_parts = find_nearby_parts(pdf_bytes)

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = generate_tp_prompt(metadata, description, nearby_parts)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º structured output
    try:
        completion = client.beta.chat.completions.parse(
            model="gpt-4o-2024-11-20",  # –∏–ª–∏ gpt-4-turbo
            response_format=TPOutput,
            messages=[
                {"role": "system", "content": "–í—ã ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1024,
            strict=True  # –ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        tp_output = completion.choices[0].message.parsed

        # –ü–µ—Ä–µ—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
        base_mass = metadata.get("mass_kg", 2.0)
        base_size = sum(metadata.get("dimensions_mm", [10, 10, 10])) / 3
        avg_time_per_unit = 0.5
        estimated_total_time = (base_mass + base_size) * avg_time_per_unit

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Markdown —Ç–∞–±–ª–∏—Ü—É
        markdown_table = "| –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ | –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è | –ù–æ–º–µ—Ä —Ü–µ—Ö–∞ | –£—á–∞—Å—Ç–æ–∫ | –í—Ä–µ–º—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç (—á–∞—Å) | –†–µ—Å—É—Ä—Å—ã |\n"
        markdown_table += "|---|---|---|---|---|---|\n"

        for i, op in enumerate(tp_output.operations):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ—Ö–∞/—É—á–∞—Å—Ç–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
            workshop_num = op.workshop_number or (i + 1)
            section = op.section or ("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π" if "–°–ª–µ—Å–∞—Ä–Ω–∞—è" in op.operation_name else "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π")
            labor_time = op.labor_time_hours or 0.3
            resources = op.resources or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            markdown_table += f"| {op.operation_name} | {op.equipment_name} | {workshop_num} | {section} | {labor_time:.2f} | {resources} |\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
        markdown_table += f"| **–ò–¢–û–ì–û** | | | | **{estimated_total_time:.2f}** | |\n"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "status": "success",
            "generated_tp": tp_output.model_dump(),
            "markdown_table": markdown_table,
            "total_estimated_time_hours": estimated_total_time
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ü: {str(e)}")


# === –®–ê–ì 8: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è Jupyter) ===
if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI-—Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8000")
    print("üìå –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ curl –∏–ª–∏ Postman:")
    print("curl -X POST http://localhost:8000/generate-tp -F 'file=@example.pdf'")
    uvicorn.run(app, host="0.0.0.0", port=8000)